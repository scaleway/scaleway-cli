üé≤üé≤üé≤ EXIT CODE: 0 üé≤üé≤üé≤
üü•üü•üü• STDERRÔ∏èÔ∏è üü•üü•üü•Ô∏è
Create a new backend for a given Load Balancer, specifying its full configuration including protocol, port and forwarding algorithm.

USAGE:
  scw lb backend create [arg=value ...]

ARGS:
  name=<generated>                            Name for the backend
  forward-protocol                            Protocol to be used by the backend when forwarding traffic to backend servers (tcp | http)
  forward-port                                Port to be used by the backend when forwarding traffic to backend servers
  forward-port-algorithm=roundrobin           Load balancing algorithm to be used when determining which backend server to forward new traffic to (roundrobin | leastconn | first)
  sticky-sessions=none                        Defines whether to activate sticky sessions (binding a particular session to a particular backend server) and the method to use if so. None disables sticky sessions. Cookie-based uses an HTTP cookie TO stick a session to a backend server. Table-based uses the source (client) IP address to stick a session to a backend server (none | cookie | table)
  [sticky-sessions-cookie-name]               Cookie name for cookie-based sticky sessions
  lb-id                                       Load Balancer ID
  [health-check.port]                         Port to use for the backend server health check
  [health-check.check-delay=3s]               Time to wait between two consecutive health checks
  [health-check.check-timeout=1s]             Maximum time a backend server has to reply to the health check
  [health-check.check-max-retries]            Number of consecutive unsuccessful health checks after which the server will be considered dead
  [health-check.mysql-config.user]            MySQL user to use for the health check
  [health-check.pgsql-config.user]            PostgreSQL user to use for the health check
  [health-check.http-config.uri]              HTTP path used for the health check
  [health-check.http-config.method]           HTTP method used for the health check
  [health-check.http-config.code]             HTTP response code expected for a successful health check
  [health-check.http-config.host-header]      HTTP host header used for the health check
  [health-check.https-config.uri]             HTTP path used for the health check
  [health-check.https-config.method]          HTTP method used for the health check
  [health-check.https-config.code]            HTTP response code expected for a successful health check
  [health-check.https-config.host-header]     HTTP host header used for the health check
  [health-check.https-config.sni]             SNI used for SSL health checks
  [health-check.check-send-proxy]             Defines whether proxy protocol should be activated for the health check
  [health-check.transient-check-delay=0.5s]   Time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN)
  [instance-server-id.{index}]                UIID of the instance server.
  [instance-server-tag.{index}]               Tag of the instance server.
  [use-instance-server-public-ip]             Use public IP address of the instance instead of the private one
  [baremetal-server-id.{index}]               UIID of the baremetal server.
  [baremetal-server-tag.{index}]              Tag of the baremetal server.
  server-ip.{index}                           List of backend server IP addresses (IPv4 or IPv6) the backend should forward traffic to
  [timeout-server=5m]                         Maximum allowed time for a backend server to process a request
  [timeout-connect=5s]                        Maximum allowed time for establishing a connection to a backend server
  [timeout-tunnel=15m]                        Maximum allowed tunnel inactivity time after Websocket is established (takes precedence over client and server timeout)
  [on-marked-down-action]                     Action to take when a backend server is marked as down (on_marked_down_action_none | shutdown_sessions)
  [proxy-protocol]                            Protocol to use between the Load Balancer and backend servers. Allows the backend servers to be informed of the client's real IP address. The PROXY protocol must be supported by the backend servers' software (proxy_protocol_unknown | proxy_protocol_none | proxy_protocol_v1 | proxy_protocol_v2 | proxy_protocol_v2_ssl | proxy_protocol_v2_ssl_cn)
  [failover-host]                             Scaleway Object Storage bucket website to be served as failover if all backend servers are down, e.g. failover-website.s3-website.fr-par.scw.cloud
  [ssl-bridging]                              Defines whether to enable SSL bridging between the Load Balancer and backend servers
  [ignore-ssl-server-verify]                  Defines whether the server certificate verification should be ignored
  [redispatch-attempt-count]                  Whether to use another backend server on each attempt
  [max-retries]                               Number of retries when a backend server connection failed
  [max-connections]                           Maximum number of connections allowed per backend server
  [timeout-queue]                             Maximum time for a request to be left pending in queue when `max_connections` is reached
  [zone=fr-par-1]                             Zone to target. If none is passed will use default zone from the config (fr-par-1 | fr-par-2 | nl-ams-1 | nl-ams-2 | nl-ams-3 | pl-waw-1 | pl-waw-2 | pl-waw-3)

DEPRECATED ARGS:
  [send-proxy-v2]   Deprecated in favor of proxy_protocol field

FLAGS:
  -h, --help   help for create

GLOBAL FLAGS:
  -c, --config string    The path to the config file
  -D, --debug            Enable debug mode
  -o, --output string    Output format: json or human, see 'scw help output' for more info (default "human")
  -p, --profile string   The config profile to use
